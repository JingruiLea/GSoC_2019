
code/await PCD_CommunicateWithPICC(var byte command,		///< The command to execute. One of the PCD_Command enums.
                                    var byte waitIRq,		///< The bits in the ComIrqReg register that signals successful completion of the command.
                                    var&[] byte sendData,		///< Pointer to the data to transfer to the FIFO.
                                    var usize sendLen,		///< Number of bytes to transfer to the FIFO.
                                    var&[] byte backData,		///< nullptr or pointer to buffer if data should be read back after executing the command.
                                    var usize backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
                                    var usize validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
                                    var usize rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
                                    var bool checkCRC) -> byte do 
    var byte txLastBits = validBits as byte;
	var byte bitFraming = ((rxAlign as byte) << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	_DEBUG_D("PCD_CommunicateWithPICC");
	await PCD_WriteRegister(outer.rc522_CommandReg, 0x00);			// Stop any active command.
	await PCD_WriteRegister(outer.rc522_ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	await PCD_WriteRegister(outer.rc522_FIFOLevelReg, 0x80);				// FlushBuffer = 1, FIFO initialization
	await PCD_WriteRegister2(outer.rc522_FIFODataReg, sendLen, &sendData);	// Write sendData to the FIFO
	await PCD_WriteRegister(outer.rc522_BitFramingReg, bitFraming);		// Bit adjustments
	await PCD_WriteRegister(outer.rc522_CommandReg, command);	
    if (command == outer.rc522_PCD_Transceive) then
		await PCD_SetRegisterBitMask(outer.rc522_BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
	end
    
    // watching 35ms do
    //     loop do 
    //         n = await PCD_ReadRegister(outer.rc522_ComIrqReg);
    //         if (n & waitIRq) != 0 then
    //             break;
    //         end
    //         if (n & 0x01) != 0 then
    //             escape STATUS_TIMEOUT;
    //         end
    //     end
    // end

    // par/or do 
    //     await 1s;
    // with
    //     loop do 
    //         n = await PCD_ReadRegister(outer.rc522_ComIrqReg);
    //         if (n & waitIRq) != 0 then
    //             break;
    //         end
    //         if (n & 0x01) != 0 then
    //             escape STATUS_TIMEOUT;
    //         end
    //     end
    // end

	var int i;
	var byte n;
	loop i in [1 -> 2000] do
		n = await PCD_ReadRegister(outer.rc522_ComIrqReg);
		if (n & waitIRq) != 0 then
			break;
		end
		if (n & 0x01) != 0 then
			_TMP_DBG("STATUS_TIMEOUT")
			escape STATUS_TIMEOUT;
		end
	end

    var byte errorRegValue = await PCD_ReadRegister(outer.rc522_ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13 != 0) then	 // BufferOvfl ParityErr ProtocolErr
		escape STATUS_ERROR;
	end

    var byte avalidBits = 0;
	
	// If the caller wants data back, get it from the MFRC522.
	if (backLen > 0) then
		n = await PCD_ReadRegister(outer.rc522_FIFOLevelReg);	// Number of bytes in the FIFO
		_TMP_DBG("back");
		_TMP_DBG(n);
		if (n > backLen) then
			escape STATUS_NO_ROOM;
		end
		// *backLen = n;											// Number of bytes returned
		await PCD_ReadRegister2(outer.rc522_FIFODataReg, n as usize, &backData, rxAlign as usize);	// Get received data from FIFO
		avalidBits = await PCD_ReadRegister(outer.rc522_ControlReg);		// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
		avalidBits = avalidBits  & 0x07;
		if (validBits != 0) then
			validBits = avalidBits as usize;
		end
	end
	outer.rc522_validBits = validBits as byte;

	if (errorRegValue & 0x08 != 0) then		// CollErr
		escape STATUS_COLLISION;
	end

		// Perform CRC_A validation if requested.
	if (checkCRC) then
		// In this case a MIFARE Classic NAK is not OK.
		if ($backData == 1 and avalidBits == 4) then
			escape STATUS_MIFARE_NACK;
		end
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if ($backData < 2 or avalidBits != 0) then
			escape STATUS_CRC_WRONG;
		end
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		// byte controlBuffer[2];
		// //TODO
		// MFRC522::StatusCode status = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
		// if (status != STATUS_OK) then
		// 	escape status;
		// end
		// if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) then
		// 	escape STATUS_CRC_WRONG;
		// end
	end
	escape STATUS_OK;
end

code/await PCD_TransceiveData(var&[] byte sendData, 
                              var usize sendLen,
                              var&[] byte backData, 
                              var usize backlen,
                              var usize validBits,
                              var usize rxAlign,
                              var bool checkCRC 
                             ) -> byte do 
	_DEBUG_D("PCD_TransceiveData");
    var byte waitIRq = 0x30;		// RxIRq and IdleIRq
    var byte res = await PCD_CommunicateWithPICC(outer.rc522_PCD_Transceive, waitIRq, &sendData, sendLen, &backData, backlen, validBits, rxAlign, checkCRC);
	escape res;
end


code/await PICC_REQA_or_WUPA(var byte command, var&[] byte bufferATQA, var usize len) -> byte do
	_DEBUG_D("PICC_REQA_or_WUPA");
    var usize validBits;
	var byte status;
    await PCD_ClearRegisterBitMask(outer.rc522_CollReg, 0x80);
    validBits = 7;
	var[1] byte sd = [command];
	status = await PCD_TransceiveData(&sd, $sd, &bufferATQA, len, validBits, 0, false);
	if (status != STATUS_OK) then
		escape status;
	end
	if ($bufferATQA != 2 or outer.rc522_validBits != 0) then		// ATQA must be exactly 16 bits.
		escape STATUS_ERROR;
	end
	escape STATUS_OK;
end

code/await PICC_RequestA(var&[] byte buf, var usize len) -> byte do
	_DEBUG_D("PICC_RequestA");
	var byte res = await PICC_REQA_or_WUPA(0x26, &buf, len);
	escape res;
end


code/await PICC_WakeupA(var&[] byte buf, var usize len) -> byte do
    _DEBUG_D("PICC_WakeupA");
	var byte res = await PICC_REQA_or_WUPA(outer.rc522_PICC_CMD_WUPA, &buf, len);
	escape res;
end
/*
 *  The Below API is an implementation of the TWI or Two Wire Interface.
 *
 *  In TWI the serial data transmission is done in asynchronous mode.
 *  This protocol uses only two wires for communicating between two or more ICs.
 *  The two bidirectional open drain lines named SDA (Serial Data) and SCL (Serial Clock) with pull up resistors are used for data transfer between devices.
 *
 *  The current API is as follows:
 *
 *
 *  Example : examples/master/master_receiver01.ceu (To be run with a slave (can use examples/slave/slave_sender01.ceu) )
 *
 *  error_codes :
 *  No error                 0
 *  Interrupt not triggered  1
 *  NACK received            2
 *  Other Errors             3
 *
 *  Refer README.md for more on how to use the I2C communication and the comparison with the Arduino API.
    */
#include "../i2c.ceu"

var u8 addr = _;
var u8 tx_buf_len = _;
var u8 rx_buf_len = _;
var u8 len = _;
var u32 clock = 100000;
var int mode = {TWI_MODE_NONE};// 0 for Write and 1 for Read

var[I2C_BUF_MAX*] byte i2c_tx_buf;// transmit buffer
var[I2C_BUF_MAX] byte i2c_rx_buf;// receive buffer

output none I2C_START;
output none I2C_STOP;
output none I2C_ERROR;
// master:
output u8 I2C_MASTER_SEND;                // master requests to send size of i2c_tx_buf number of bytes to slave with the address mentioned in the parameter
output (u8,u8) I2C_MASTER_RECEIVE;        // master requests certain amount of data from slave with address equal to the second parameter.

//slave:
output none I2C_SLAVE_SEND;               // emit this output to send data that's in the i2c_tx_buf.

//input to await the completion of transfer
input none I2C_DONE;                  // this input is emitted once the transfer of data is complete. The values returned are number of bytes and errorcode respectively.

//Should these two API public or internal? 
code/await I2C_Read  (var&[] byte buf, var u8? address, var usize? len) -> bool;

code/await I2C_Write (var&[] byte buf, var u8? address) -> bool;

native/pre do
    ##include <compat/twi.h>
    #include "print_status.h"   // include for printing the status

    enum {
        TWI_ERR_NONE = 0,
        TWI_ERR_NACK = 1,
        TWI_ERR_ARB  = 2,
        TWI_ERR_BUS  = 3,
    };

    enum {
        TWI_MODE_NONE  = -1,
        TWI_MODE_WRITE_MASTER =  0,
        TWI_MODE_READ_MASTER  =  1,
        TWI_MODE_WRITE_SLAVE =  2,
        TWI_MODE_READ_SLAVE  =  3,
    };
end

native
    _TWI_vect,
;   

code/call I2C_Reply(var u8 ack) -> none do
    if ack != 0 then
        {TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);}
    else
        {TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);}
    end
end

output (on/off v, u8? address) I2C do
    if address? then
        {TWAR = @(address!) << 1;}
    end
    if v then
        {
            TWBR = ((F_CPU / 100000L) - 16) / 2; // Bit rate formula
            digitalWrite(SDA, 1);
            digitalWrite(SCL, 1);
        }
        call I2C_Reply(1);
    else
        {
            TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
            digitalWrite(SDA, 0);
            digitalWrite(SCL, 0);
        }
    end
end

output (none) I2C_START do
    {TWCR = _BV(TWINT)|_BV(TWSTA)|_BV(TWEN)|_BV(TWIE)|_BV(TWEA);}
end

output (none) I2C_STOP do
    {
        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    }
end

code/await I2C_Master_Write (var byte address) -> none do
    emit I2C_MASTER_SEND(address as u8);
    await I2C_DONE;
end

code/await I2C_Master_Read (var byte address, var usize len) -> none do
    emit I2C_MASTER_RECEIVE(address as u8, len as u8);
    await I2C_DONE;
end

code/await I2C_Master_Receive(var&[] byte buf, var byte address, var usize len) -> bool do
    await I2C_Master_Read(address, len);
    buf = [] .. outer.i2c_rx_buf;
    if outer.i2c_errno == {TWI_ERR_NONE} then 
        escape true;
    else
        escape false;
    end
end

code/await I2C_Master_Send(var&[] byte buf, var byte address) -> bool do
    outer.i2c_tx_buf = [] .. buf;
    await I2C_Master_Write(address);
    if outer.i2c_errno == {TWI_ERR_NONE} then 
        escape true;
    else
        escape false;
    end
end

code/await I2C_Slave_Receive(var&[] byte buf) -> bool do
    buf = [] .. outer.i2c_rx_buf;
    if outer.i2c_errno == {TWI_ERR_NONE} then 
        escape true;
    else
        escape false;
    end
end

code/await I2C_Slave_Send(var&[] byte buf) -> bool do
    outer.i2c_tx_buf = [] .. buf;
    emit I2C_SLAVE_SEND;
    await I2C_DONE;
    if outer.i2c_errno == {TWI_ERR_NONE} then 
        escape true;
    else
        escape false;
    end
end

code/call I2C_Set_Clock (var u32 clock) -> none do 
    outer.clock = clock;
    {TWBR = ((F_CPU / @(outer.clock)) - 16) / 2;}
end

output (u8 address) I2C_MASTER_SEND do    
    outer.tx_buf_len = $outer.i2c_tx_buf as u8; // set tx_buf_len to buffer length

    outer.mode = {TWI_MODE_WRITE_MASTER};// write mode
    outer.addr = address; // set the slave address    
    
    emit I2C_START;
end

output none I2C_SLAVE_SEND do
    outer.tx_buf_len = $outer.i2c_tx_buf as u8;
    if outer.tx_buf_len > 0 then
        outer.mode = {TWI_MODE_WRITE_SLAVE};
        {
            TWDR = @(outer.i2c_tx_buf[0]); // send the first byte of data
        }
        call I2C_Reply(1);
        $outer.i2c_tx_buf = $outer.i2c_tx_buf - 1;
    end
end

output (u8 address, u8 n_bytes) I2C_MASTER_RECEIVE do
    outer.rx_buf_len = n_bytes;

    outer.i2c_rx_buf = []; // clear the receive buffer
    outer.mode = {TWI_MODE_READ_MASTER}; // read mode    
    outer.addr = address; // set the slave address

    emit I2C_START;
end


spawn async/isr [_TWI_vect] do

    var u8 error_code = 0;
    var bool done = true;
    var bool slave_sent_ack = false;
    var int value = -1;

    var bool txed = false;
    var bool rxed = false;
    {
        print_stat(TW_STATUS); // uncomment to print the status
        switch(TW_STATUS){
            case TW_START:
            case TW_REP_START:
                @(error_code) = TWI_ERR_NONE;
                if(@(outer.mode)!=TWI_MODE_NONE){
                    TWDR = (@outer.addr << 1) | (@(outer.mode) & 1); // SLA + Read/Write (Write in this case)
                    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWEA); // Continue Transfer
                    @done = 0;
                }
                break;
            case TW_MT_SLA_ACK:
            case TW_MT_DATA_ACK:
                if (@($outer.i2c_tx_buf) > 0) {
                    TWDR = @(outer.i2c_tx_buf[0]);
                    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);
                    @txed = 1;
                    @done = 0;
                }else{
                    @done = 1;
                    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);//send stop
                }
                break;
            case TW_MT_SLA_NACK:
            case TW_MT_DATA_NACK:
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);//send stop
                @error_code = TWI_ERR_NACK;// in case of slave not connected or receiving NACK from slave or requesting more data from the slave than the amount sent
                break;
            case TW_MR_DATA_ACK:
                @value = TWDR;
            case TW_MR_SLA_ACK:
                if(@outer.rx_buf_len > 0){
                    @done = 0;
                    @outer.rx_buf_len--;
                    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWEA); // send ack
                }else{
                    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
                    @done = 1;
                }
                break;
            case TW_MR_DATA_NACK:
                @value = -1;
                @done = 1;
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);//send stop
                break;
            case TW_MR_SLA_NACK:
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
                @error_code = TWI_ERR_NACK; // in case of slave not connected or receiving NACK from slave
                break;
            case TW_ST_SLA_ACK:
            case TW_ST_ARB_LOST_SLA_ACK:
                @slave_sent_ack = 1;
                @outer.mode = TWI_MODE_WRITE_SLAVE;
                @done = 0;
                break;
            case TW_ST_DATA_ACK:
                if (@($outer.i2c_tx_buf) > 0) {
                    TWDR = @(outer.i2c_tx_buf[0]);
                    if (@($outer.i2c_tx_buf) != 1)
                        TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
                    else
                        TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE);// last data sent
                    @txed = 1;
                }else{
                    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE); // send NACK
                }
                @done = 0;
                break;
            case TW_ST_DATA_NACK:
            case TW_ST_LAST_DATA:
                TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
                break;
            case TW_SR_SLA_ACK:
            case TW_SR_GCALL_ACK:
            case TW_SR_ARB_LOST_SLA_ACK: 
            case TW_SR_ARB_LOST_GCALL_ACK:
                @rxed =  1;
                @outer.mode = TWI_MODE_READ_SLAVE;
                @done = 0;
                TWCR = _BV(TWINT)|_BV(TWEA)|_BV(TWEN)|_BV(TWIE);
                break;
            case TW_SR_DATA_ACK:       // data received, returned ack
            case TW_SR_GCALL_DATA_ACK:
                @value = TWDR;
                @done=0;
                TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
                break;
            case TW_SR_STOP:
                break;
            case TW_SR_DATA_NACK:
            case TW_SR_GCALL_DATA_NACK:
                @error_code = TWI_ERR_NACK;
                break;
            case TW_BUS_ERROR:
                @error_code = TWI_ERR_BUS;
        }
    }
    
    if error_code == {TWI_ERR_BUS} then
        emit I2C_STOP;
    end

    if txed then
        $outer.i2c_tx_buf = $outer.i2c_tx_buf - 1;
    end

    if rxed then
        outer.i2c_rx_buf = [];
    end

    if slave_sent_ack then
        emit I2C_SLAVE_SEND_REQUESTED;
        {TWCR =  _BV(TWEN) | _BV(TWEA);} // disable interrupt from getting triggered
    end

    if value!=-1 then
        outer.i2c_rx_buf = outer.i2c_rx_buf .. [value as byte];// Push the received value to the buffer
    end
    
    if done then
        if outer.mode != {TWI_MODE_NONE} then
            if outer.mode == {TWI_MODE_WRITE_SLAVE} or outer.mode == {TWI_MODE_WRITE_MASTER} then
                emit I2C_DONE;
                outer.i2c_tx_buf = [];
            else
                if outer.mode == {TWI_MODE_READ_MASTER} then
                    emit I2C_DONE;
                else
                    emit I2C_SLAVE_RECEIVE_REQUESTED;
                end
                outer.len = ($outer.i2c_rx_buf) as u8;
            end
        else
            emit I2C_DONE;
        end
        
        if outer.mode & 2 != 0 then // if slave
            call I2C_Reply(1); // send ACK and wait for master to address slave
        end

        outer.mode = {TWI_MODE_NONE};
        outer.i2c_errno = error_code;
    end

end